library(tidyverse)
library(InformationValue)
library(tidyverse)
library(InformationValue)
char_preds <- read.csv('got_characters.csv')
library(tidyverse)
library(InformationValue)
df <- read.csv('got_characters.csv')
View(char_preds)
View(char_preds)
View(df)
nrow(df)
nunique(df$name)
unique(df$name)
summary(df)
sum(is.na(df))
sum(is.na(df$actual))
sum(is.na(df$title))
sum(is.na(df$culture))
sum(is.na(df$mother))
df1 %>%
mutate_all(~replace(., . == 0, NA))
df %>%
mutate_all(~replace(., . == 0, NA))
df %>%
mutate_all(~replace(., . == '', NA))
View(df)
View(df)
df1<-df %>%
mutate_all(~replace(., . == '', NA))
View(df1)
head(df1)
sum(is.na(df$title))
sum(is.na(df$isAliveMother))
sum(is.na(df$title))
sum(is.na(df$culture))
df1<-df %>%
mutate_all(~replace(., . == '', "NA"))
head(df1)
sum(is.na(df$culture))
df1<-df %>%
mutate_all(~replace(., . == '', NA))
head(df1)
sum(is.na(df$culture))
sum(is.na(df1$culture))
sum(is.na(df1$mother))
sum(is.na(df1$heir))
sum(is.na(df1$house))
missingVal<-c(sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)))
c(sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)))
colnames(df1)
missingVal<- data.frame(colnames(df1),c(sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title))))
mv<-c(sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))) )
missingVal<- data.frame(colnames(df1), mv)
#mv<-c(sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))) )
#missingVal<- data.frame(colnames(df1), mv)
colnames(df1)
mv<-c(sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))) )
head(missingVal)
mv<-c(sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))) )
missingVal<- data.frame(colnames(df1), mv)
mv
mv<-c(0, sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))) )
missingVal<- data.frame(colnames(df1), mv)
mv
missingVa
missingVal
mv<-c(sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))), 0 )
missingVal<- data.frame(colnames(df1), mv)
missingVal
sum(is.na(df1$culture))
sum(is.na(df1$isAliveMother))
sum(is.na(df1$age))
sum(is.na(df1$popularity))
data[order(missingVal$mv, decreasing = TRUE), ]
missingVal[order(missingVal$mv, decreasing = TRUE)]
missingVal<- data.frame(cols = colnames(df1), vals = mv)
missingVal[order(missingVal$mv, decreasing = TRUE)]
missingVal[order(missingVal$vals, decreasing = TRUE)]
missingVal[order(missingVal$vals, decreasing = TRUE), ]
mv<-transform(missingVal, c= (vals/1946)*100)
mv
mv<-transform(missingVal, c= format(round((vals/1946)*100, 2), nsmall = 2) )
mv
vals<-c(sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))), 0 )
missingVal<- data.frame(cols = colnames(df1), vals = vals)
mv<-transform(missingVal, c= format(round((vals/1946)*100, 2), nsmall = 2) )
mv<-mv[order(mv$vals, decreasing = TRUE), ]
mv
mv<-transform(missingVal,  percent = format(round((vals/1946)*100, 2), nsmall = 2) )
mv<-mv[order(mv$vals, decreasing = TRUE), ]
mv
mv[mv$percent > 80.00, ]
# Display columns with missing values percent > 80.00
mv[mv$percent > 80.00, ]
# Display columns with missing values percent > 80.00
mv[mv$percent > 80.00, ]
data = subset(df1, select = -c(mother, isAliveMother, heir, isAliveHeir, father, isAliveFather, spouse, isAliveSpouse))
data
head(data)
corrplot(m, method="circle")
# correlation matrix
library("corrplot")
m<-cor(df1)
m<-cor(df1)
ggplot(data, aes(x=dateOfBirth)) +
geom_histogram(binwidth=5, colour="black", fill="white")
library(tidyverse)
ggplot(data, aes(x=dateOfBirth)) +
geom_histogram(binwidth=5, colour="black", fill="white")
ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
library(tidyverse)
library(InformationValue)
df <- read.csv('got_characters.csv')
nrow(df)
# Convert empty values to null
library(dplyr)
df1<-df %>%
mutate_all(~replace(., . == '', NA))
head(df1)
# Calculate % of missing values
vals<-c(sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))), 0 )
missingVal<- data.frame(cols = colnames(df1), vals = vals)
mv<-transform(missingVal,  percent = format(round((vals/1946)*100, 2), nsmall = 2) )
mv<-mv[order(mv$vals, decreasing = TRUE), ]
mv
# Display columns with missing values percent > 80.00
mv[mv$percent > 80.00, ]
data = subset(df1, select = -c(mother, isAliveMother, heir, isAliveHeir, father, isAliveFather, spouse, isAliveSpouse))
head(data)
# Distribution of Age - without imputation
ggplot(data, aes(x=age)) +
geom_histogram(binwidth=5, colour="black", fill="white")
# Imputation with median
data$age[is.na(data$age)]<-median(data$age, na.rm = TRUE)
ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
#data$age[is.na(data$age)]<-mean(data$age, na.rm = TRUE)
#ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
ggplot(data, aes(x=dateOfBirth)) +
geom_histogram(binwidth=5, colour="black", fill="white")
# Converting categorical data to numeric
data$culture<-unclass(as.factor(data$culture))
data$culture[is.na(data$culture)]<- (-1)
data$name<-unclass(as.factor(data$name))
data$house<-unclass(as.factor(data$house))
data$house[is.na(data$house)]<- (-1)
data$title<-unclass(as.factor(data$title))
data$title[is.na(data$title)]<- (-1)
table(data$actual)
# i1 - alive characters, i0 - dead characters
i1 <- data[which(data$actual == 1), ]
i0 <- data[which(data$actual == 0), ]
# Select 70 percent of rows of dead class and equal no of alive rows
t1<-sample(1:nrow(i1), 0.7*nrow(i0))
t0<-sample(1:nrow(i0), 0.7*nrow(i0))
training_alive <- i1[t1, ]
training_dead <- i0[t0, ]
# Combine dead and alive characters and then shuffle
training_data <- rbind(training_alive, training_dead)
training_data <- training_data[sample(1:nrow(training_data)), ]
# test
test_alive <- i1[-t1, ]
test_dead<-i0[-t0, ]
test_data<-rbind(test_alive, test_dead)
test_data<-test_data[sample(1:nrow(test_data)), ]
#Check the distribution of classes in the splits
table(training_data$actual)
table(test_data$actual)
data
model<-glm(actual~ . , data = training_data)
summary(model)
library(tidyverse)
library(InformationValue)
library(ggplot2)
df <- read.csv('got_characters.csv')
ggplot(data, aes(x=dateOfBirth)) +
geom_histogram(binwidth=10, colour="black", fill="white")
model<-glm(actual ~ age + culture male + book1 +
model<-glm(actual ~ age + culture + male + book1 +
isMarried + boolDeadRelations + isPopular + popularity,
family = binomial(link="logit"), data = training_data)
summary(model)
predicted <- plogis(predict(model, test_data))
predicted
predicted <- plogis(predict(model, test_data))
# Predicting for test data
predicted <- plogis(predict(model, test_data))
# Predicting for test data
predicted <- plogis(predict(model, test_data))
model<-glm(actual ~ age + culture + male + book1 + book2 + book3 + book4 +
isMarried + boolDeadRelations + isPopular + popularity,
family = binomial(link="logit"), data = training_data)
summary(model)
optCutOff <- optimalCutoff(test_data$actual, predicted)[1]
optCutOff
misClassError(test_data$actual, predicted, threshold = optCutOff)
sensitivity(test_data$actual, predicted, threshold = optCutOff)
specificity(test_data$actual, predicted, threshold = optCutOff)
# The columns are actual values (ground truth), while rows are predicted values.
confusionMatrix(test_data$actual, predicted, threshold = optCutOff)
#Plot the RoC curve and report the AUC
plotROC(test_data$actual, predicted)
model<-glm(actual ~ age + culture + male + book1 + book2 + book3 + book4 + house +
isMarried + boolDeadRelations + isPopular + popularity,
family = binomial(link="logit"), data = training_data)
summary(model)
# Predicting for test data
predicted <- plogis(predict(model, test_data))
misClassError(test_data$actual, predicted, threshold = optCutOff)
sensitivity(test_data$actual, predicted, threshold = optCutOff)
specificity(test_data$actual, predicted, threshold = optCutOff)
# The columns are actual values (ground truth), while rows are predicted values.
confusionMatrix(test_data$actual, predicted, threshold = optCutOff)
library(tidyverse)
library(InformationValue)
library(ggplot2)
df <- read.csv('got_characters.csv')
nrow(df)
# Convert empty values to null
library(dplyr)
df1<-df %>%
mutate_all(~replace(., . == '', NA))
head(df1)
# Calculate % of missing values
vals<-c(sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))), 0 )
missingVal<- data.frame(cols = colnames(df1), vals = vals)
mv<-transform(missingVal,  percent = format(round((vals/1946)*100, 2), nsmall = 2) )
mv<-mv[order(mv$vals, decreasing = TRUE), ]
mv
# Display columns with missing values percent > 80.00
mv[mv$percent > 80.00, ]
data = subset(df1, select = -c(mother, isAliveMother, heir, isAliveHeir, father, isAliveFather, spouse, isAliveSpouse))
head(data)
# Distribution of Age - without imputation
ggplot(data, aes(x=age)) +
geom_histogram(binwidth=5, colour="black", fill="white")
# Imputation with median
data$age[is.na(data$age)]<-median(data$age, na.rm = TRUE)
ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
#data$age[is.na(data$age)]<-mean(data$age, na.rm = TRUE)
#ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
# Converting categorical data to numeric
data$culture<-unclass(as.factor(data$culture))
data$culture[is.na(data$culture)]<- (-1)
data$name<-unclass(as.factor(data$name))
data$house<-unclass(as.factor(data$house))
data$house[is.na(data$house)]<- (-1)
data$title<-unclass(as.factor(data$title))
data$title[is.na(data$title)]<- (-1)
table(data$actual)
# i1 - alive characters, i0 - dead characters
i1 <- data[which(data$actual == 1), ]
i0 <- data[which(data$actual == 0), ]
# Select 70 percent of rows of dead class and equal no of alive rows
t1<-sample(1:nrow(i1), 0.7*nrow(i0))
t0<-sample(1:nrow(i0), 0.7*nrow(i0))
training_alive <- i1[t1, ]
training_dead <- i0[t0, ]
# Combine dead and alive characters and then shuffle
training_data <- rbind(training_alive, training_dead)
training_data <- training_data[sample(1:nrow(training_data)), ]
# test
test_alive <- i1[-t1, ]
test_dead<-i0[-t0, ]
test_data<-rbind(test_alive, test_dead)
test_data<-test_data[sample(1:nrow(test_data)), ]
#Check the distribution of classes in the splits
table(training_data$actual)
table(test_data$actual)
data
model<-glm(actual ~ . ,
family = binomial(link="logit"), data = training_data)
summary(model)
# Predicting for test data
predicted <- plogis(predict(model, test_data))
optCutOff <- optimalCutoff(test_data$actual, predicted)[1]
library(tidyverse)
library(InformationValue)
library(ggplot2)
df <- read.csv('got_characters.csv')
nrow(df)
# Convert empty values to null
library(dplyr)
df1<-df %>%
mutate_all(~replace(., . == '', NA))
head(df1)
# Calculate % of missing values
vals<-c(sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))), 0 )
missingVal<- data.frame(cols = colnames(df1), vals = vals)
mv<-transform(missingVal,  percent = format(round((vals/1946)*100, 2), nsmall = 2) )
mv<-mv[order(mv$vals, decreasing = TRUE), ]
mv
# Display columns with missing values percent > 80.00
mv[mv$percent > 80.00, ]
data = subset(df1, select = -c(mother, isAliveMother, heir, isAliveHeir, father, isAliveFather, spouse, isAliveSpouse))
head(data)
# Distribution of Age - without imputation
ggplot(data, aes(x=age)) +
geom_histogram(binwidth=5, colour="black", fill="white")
# Imputation with median
data$age[is.na(data$age)]<-median(data$age, na.rm = TRUE)
ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
#data$age[is.na(data$age)]<-mean(data$age, na.rm = TRUE)
#ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
# Converting categorical data to numeric
data$culture<-unclass(as.factor(data$culture))
data$culture[is.na(data$culture)]<- (-1)
data$name<-unclass(as.factor(data$name))
data$house<-unclass(as.factor(data$house))
data$house[is.na(data$house)]<- (-1)
data$title<-unclass(as.factor(data$title))
data$title[is.na(data$title)]<- (-1)
table(data$actual)
# i1 - alive characters, i0 - dead characters
i1 <- data[which(data$actual == 1), ]
i0 <- data[which(data$actual == 0), ]
# Select 70 percent of rows of dead class and equal no of alive rows
t1<-sample(1:nrow(i1), 0.7*nrow(i0))
t0<-sample(1:nrow(i0), 0.7*nrow(i0))
training_alive <- i1[t1, ]
training_dead <- i0[t0, ]
# Combine dead and alive characters and then shuffle
training_data <- rbind(training_alive, training_dead)
training_data <- training_data[sample(1:nrow(training_data)), ]
# test
test_alive <- i1[-t1, ]
test_dead<-i0[-t0, ]
test_data<-rbind(test_alive, test_dead)
test_data<-test_data[sample(1:nrow(test_data)), ]
#Check the distribution of classes in the splits
table(training_data$actual)
table(test_data$actual)
data
model<-glm(actual ~ age + culture + male + book1 + book2 + book3 + book4 +
isMarried + boolDeadRelations + isPopular + popularity,
family = binomial(link="logit"), data = training_data)
summary(model)
# Predicting for test data
predicted <- plogis(predict(model, test_data))
optCutOff <- optimalCutoff(test_data$actual, predicted)[1]
optCutOff
misClassError(test_data$actual, predicted, threshold = optCutOff)
sensitivity(test_data$actual, predicted, threshold = optCutOff)
specificity(test_data$actual, predicted, threshold = optCutOff)
# The columns are actual values (ground truth), while rows are predicted values.
confusionMatrix(test_data$actual, predicted, threshold = optCutOff)
#Plot the RoC curve and report the AUC
plotROC(test_data$actual, predicted)
library(tidyverse)
library(InformationValue)
library(ggplot2)
df <- read.csv('got_characters.csv')
nrow(df)
# Convert empty values to null
library(dplyr)
df1<-df %>%
mutate_all(~replace(., . == '', NA))
head(df1)
# Calculate % of missing values
vals<-c(sum(is.na(df1$X)), sum(is.na(df1$S.No)), sum(is.na(df1$actual)), sum(is.na(df1$name)), sum(is.na(df1$title)), sum(is.na(df1$male)), sum(is.na(df1$culture)), sum(is.na(df1$dateOfBirth)), sum(is.na(df1$mother)), sum(is.na(df1$father)), sum(is.na(df1$heir)), sum(is.na(df1$house)), sum(is.na(df1$spouse)), sum(is.na(df1$book1)), sum(is.na(df1$book2)), sum(is.na(df1$book3)), sum(is.na(df1$book4)), sum(is.na(df1$book5)), sum(is.na(df1$isAliveMother)), sum(is.na(df1$isAliveFather)), sum(is.na(df1$isAliveHeir)), sum(is.na(df1$isAliveSpouse)), sum(is.na(df1$isMarried)), sum(is.na(df1$isNoble)), sum(is.na(df1$age)), sum(is.na(df1$numDeadRelations)), sum(is.na(df1$boolDeadRelations)), sum(is.na(df1$isPopular), sum(is.na(df1$popularity))), 0 )
missingVal<- data.frame(cols = colnames(df1), vals = vals)
mv<-transform(missingVal,  percent = format(round((vals/1946)*100, 2), nsmall = 2) )
mv<-mv[order(mv$vals, decreasing = TRUE), ]
mv
# Display columns with missing values percent > 80.00
mv[mv$percent > 80.00, ]
data = subset(df1, select = -c(mother, isAliveMother, heir, isAliveHeir, father, isAliveFather, spouse, isAliveSpouse))
head(data)
# Distribution of Age - without imputation
ggplot(data, aes(x=age)) +
geom_histogram(binwidth=5, colour="black", fill="white")
# Imputation with median
data$age[is.na(data$age)]<-median(data$age, na.rm = TRUE)
ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
#data$age[is.na(data$age)]<-mean(data$age, na.rm = TRUE)
#ggplot(data, aes(x=age)) + geom_histogram(binwidth=5, colour="black", fill="white")
# Converting categorical data to numeric
data$culture<-unclass(as.factor(data$culture))
data$culture[is.na(data$culture)]<- (-1)
data$name<-unclass(as.factor(data$name))
data$house<-unclass(as.factor(data$house))
data$house[is.na(data$house)]<- (-1)
data$title<-unclass(as.factor(data$title))
data$title[is.na(data$title)]<- (-1)
table(data$actual)
# i1 - alive characters, i0 - dead characters
i1 <- data[which(data$actual == 1), ]
i0 <- data[which(data$actual == 0), ]
# Select 70 percent of rows of dead class and equal no of alive rows
t1<-sample(1:nrow(i1), 0.7*nrow(i0))
t0<-sample(1:nrow(i0), 0.7*nrow(i0))
training_alive <- i1[t1, ]
training_dead <- i0[t0, ]
# Combine dead and alive characters and then shuffle
training_data <- rbind(training_alive, training_dead)
training_data <- training_data[sample(1:nrow(training_data)), ]
# test
test_alive <- i1[-t1, ]
test_dead<-i0[-t0, ]
test_data<-rbind(test_alive, test_dead)
test_data<-test_data[sample(1:nrow(test_data)), ]
#Check the distribution of classes in the splits
table(training_data$actual)
table(test_data$actual)
data
model<-glm(actual ~ age + culture + male + book1 + book2 + book3 + book4 +
isMarried + boolDeadRelations + isPopular + popularity,
family = binomial(link="logit"), data = training_data)
summary(model)
# Predicting for test data
predicted <- plogis(predict(model, test_data))
optCutOff <- optimalCutoff(test_data$actual, predicted)[1]
optCutOff
misClassError(test_data$actual, predicted, threshold = optCutOff)
sensitivity(test_data$actual, predicted, threshold = optCutOff)
specificity(test_data$actual, predicted, threshold = optCutOff)
# The columns are actual values (ground truth), while rows are predicted values.
confusionMatrix(test_data$actual, predicted, threshold = optCutOff)
#Plot the RoC curve and report the AUC
plotROC(test_data$actual, predicted)
